#!/usr/bin/env python2

import re
import subprocess
import sys
import xml.etree.cElementTree
from collections import Counter, defaultdict
from datetime import datetime, timedelta
from optparse import OptionParser
from os.path import basename


def fail(message):
    print >>sys.stderr, '%s: error: %s' % (basename(sys.argv[0]), message)
    sys.exit(1)


def parse_args():
    parser = OptionParser()
    parser.add_option("-d", "--days",
                      help="history length in number of days. Default: 30",
                      metavar="DAYS", type="int", dest="history_length",
                      default=30)
    parser.add_option("-f", "--filter",
                      help="only consider commits touching a path matching a"
                           " regexp")
    parser.add_option("-u", "--repository-url",
                      help="repository url, e.g. http://svn.arrisi.com/dev",
                      metavar="REPOSITORY_URL", type="string",
                      dest="repository_url")
    (options, args) = parser.parse_args()
    if options.repository_url is None:
        fail("repository-url argument is required")
    if options.history_length <= 0:
        fail("history must be at least one day in length")
    return options


def get_svn_log(repository_url, history_length):
    one_month_back_date = datetime.today() - timedelta(days=history_length)
    cmd = "svn log --xml -v -r '{%s}:HEAD' %s" % (
        one_month_back_date.isoformat(), repository_url)
    return subprocess.check_output(cmd, shell=True)


def get_repo_parts(logentry):
    repo_parts = set()
    for path_node in logentry.find('paths').iter('path'):
        path = path_node.text
        repo_parts.add(path.split("/")[1])
    return repo_parts


def extract_repo_part_user_count_data(xml_log, filter):
    repo_part_user_count_data = defaultdict(Counter)
    root = xml.etree.cElementTree.fromstring(xml_log)
    for logentry in root.iter('logentry'):
        if filter is None:
            matches_filter = True
        else:
            matches_filter = False
            for path in logentry.iter('path'):
                if re.search(filter, path.text):
                    matches_filter = True
        if matches_filter:
            author = logentry.find('author').text
            for repo_part in get_repo_parts(logentry):
                repo_part_user_count_data[repo_part][author] += 1
    return repo_part_user_count_data


def get_total_user_count(repo_part_user_count_data):
    merged_counters = Counter()
    for repo_part in repo_part_user_count_data:
        merged_counters += repo_part_user_count_data[repo_part]
    return len(merged_counters)


def display_results(repo_part_user_count_data, history_length):
    template = '{0: <30}{1: >3}'
    print 'The number of developers committing for'
    print 'different repository parts. %d day(s) history:' % history_length
    print '=============================================='
    print ''
    total_user_count = get_total_user_count(repo_part_user_count_data)
    print template.format('All repository parts', total_user_count)
    print ''
    for repo_part in sorted(repo_part_user_count_data):
        repo_part_user_count = len(repo_part_user_count_data[repo_part])
        print template.format(repo_part, repo_part_user_count)
    print ''


def main():
    args = parse_args()
    print "Reading svn log. Wait a few minutes..."
    xml_log = get_svn_log(args.repository_url, args.history_length)
    print "Analyzing data..."
    repo_part_user_count_data = extract_repo_part_user_count_data(
        xml_log, args.filter)
    print ""
    display_results(repo_part_user_count_data, args.history_length)

main()
