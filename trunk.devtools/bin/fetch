#!/usr/bin/python
#
# Simple script used to assist in fetching code from SVN
# See usage function for help.
#
import sys
import os
import getopt
import subprocess

version = "1.01"

debug_level = 0

def usage():
    print """
    %s version %s

    usage: %s what [where]

    Fetches code from svn into current directory or into 'where'.

      what      What to fetch.  For example:

                trunk
                bsg/branches/KA1.2_ED8
                trunk@229742
                portals/testGroupPortal/trunk

      where     Where to fetch to, relative to current directory

    Example:

      %s fetch bsg/branches/KA1.2_ED8 sprint8

      will fetch branch KA1.2_ED8 into <current directory>/sprint8.

    """ % (my_name, version, my_name, my_name)


def do_fetch(args):
    debug(2, 'in do_fetch, args: %s' % args)
    if len(args) == 0:
        print '%s fetch ERROR: expected what to fetch' % my_name
        sys.exit(5)
    which = args[0]
    args.pop(0)
    if which == 'trunk':
        which = 'bsg/trunk'
    if len(args) > 0:
        if (args[0] == 'r') or (args[0] == 'rev') or (args[0] == 'revision'):
            if len(args) == 1:
                print "%s fetch ERROR: expected revision number" % my_name
                sys.exit(6)
            which = which + '@' + args[1]
            args.pop(0)
            args.pop(0)
    dest = ""
    if len(args) > 0:
        dest = args[0]
    debug(2, "do_fetch: which: '%s', dest: '%s'" % (which, dest))
    subprocess.call(
        ['svn', 'co', 'http://svn.arrisi.com/dev/%s' % which, dest])
    subprocess.call(['svn', 'update', dest])


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "dhv", ["debug", "help"])
    except getopt.GetoptError, err:
        print str(err)  # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    global debug_level
    debug_level = 0
    debug(2, 'opts: %s' % opts)
    debug(2, 'args: %s' % args)
    for o, a in opts:
        if o == "-v":
            print "verbose mode"
            debug_level = 1
        elif o in ("-h", "--help"):
            usage()
            sys.exit(3)
        elif o in ("-d", "--debug"):
            print 'debug mode'
            debug_level = 2
        else:
            assert False, "unhandled option"
    if len(args) == 0:
        print ''
        print '%s ERROR: missing command.' % my_name
        usage()
        sys.exit(1)
    do_fetch(args)


def debug(level, str):
    if (debug_level >= level):
        print str


if __name__ == "__main__":
    wc_home = ''
    my_name = os.path.basename(sys.argv[0])
    cwd = os.getcwd()
    main()
