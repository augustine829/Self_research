Index: uncrustify-0.60/src/width.cpp
===================================================================
--- uncrustify-0.60.orig/src/width.cpp
+++ uncrustify-0.60/src/width.cpp
@@ -35,7 +35,7 @@ static void split_before_chunk(chunk_t *
    {
       newline_add_before(pc);
       // reindent needs to include the indent_continue value and was off by one
-      reindent_line(pc, pc->brace_level * cpd.settings[UO_indent_columns].n +
+      reindent_line(pc, (pc->brace_level + 1) * cpd.settings[UO_indent_columns].n +
                     abs(cpd.settings[UO_indent_continue].n) + 1);
       cpd.changes++;
    }
Index: uncrustify-0.60/src/indent.cpp
===================================================================
--- uncrustify-0.60.orig/src/indent.cpp
+++ uncrustify-0.60/src/indent.cpp
@@ -1607,17 +1607,19 @@ void indent_text(void)
                    (next->type == CT_VBRACE_OPEN)))
          {
             // indent const - void GetFoo(void)\n const\n { return (m_Foo); }
-            indent_column_set(cpd.settings[UO_indent_func_const].n);
+            indent_column_set(indent_column + cpd.settings[UO_indent_func_const].n);
             LOG_FMT(LINDENT, "%s: %d] const => %d [%s]\n",
                     __func__, pc->orig_line, indent_column, pc->str.c_str());
             reindent_line(pc, indent_column);
          }
          else if (cpd.settings[UO_indent_func_throw].n &&
                   (pc->type == CT_THROW) &&
-                  (pc->parent_type != CT_NONE))
+                  ((pc->parent_type != CT_NONE) ||
+                   ((prev->type == CT_QUALIFIER) &&
+                    (strncasecmp(prev->text(), "const", prev->len()) == 0))))
          {
             // indent throw - void GetFoo(void)\n throw()\n { return (m_Foo); }
-            indent_column_set(cpd.settings[UO_indent_func_throw].n);
+            indent_column_set(indent_column + cpd.settings[UO_indent_func_throw].n);
             LOG_FMT(LINDENT, "%s: %d] throw => %d [%s]\n",
                     __func__, pc->orig_line, indent_column, pc->str.c_str());
             reindent_line(pc, indent_column);
