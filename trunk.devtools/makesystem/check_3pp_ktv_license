#!/usr/bin/env python2

# Copyright (c) 2013-2014 ARRIS Enterprises, Inc. All rights reserved.
#
# This program is confidential and proprietary to ARRIS Enterprises, Inc.
# (ARRIS), and may not be copied, reproduced, modified, disclosed to others,
# published or used, in whole or in part, without the express prior written
# permission of ARRIS.

import glob
import hashlib
import os
import sys
from subprocess import call
from license_parser import LicenseParser, ParserError, USAGE_URL
from license_parser import OpenSourceNoticeConfig


def list_license_files(license_name):
    return [x for x in glob.glob(license_name + "*") if not x.endswith("~")]


def read_sha1_from_bref(bref_file):
    for line in open(bref_file):
        if line.startswith("sha1="):
            return line.split("=")[1].strip()
    raise Exception("invalid bref file: %s" % bref_file)


def calculate_sha1(file_name):
    with open(file_name, "rb") as f:
        return hashlib.sha1(f.read()).hexdigest()


def verify_binary_file(file_name, expected_sha1):
    bref_file = "%s.bref" % file_name
    if os.path.isfile(bref_file):
        sha1 = read_sha1_from_bref(bref_file)
    elif os.path.isfile(file_name):
        sha1 = calculate_sha1(file_name)
    else:
        raise Exception("could not find file: %s" % file_name)

    if sha1 != expected_sha1:
        raise Exception("SHA1 (%s) for %s does not match"
                        " SHA1 given in license file (%s)"
                        % (sha1, file_name, expected_sha1))


def print_error(msg):
    print >> sys.stderr, "Error: %s: %s" % (os.path.basename(__file__), msg)


def print_progress(print_progress_command, license_file, status):
    call([print_progress_command,
          "LICENSE",
          "%s validation %s" % (license_file, status)])


def main():
    print_progress_command = sys.argv[1]
    license_files = list_license_files("3PPLICENSE")
    license_files.extend(list_license_files("KTVLICENSE"))
    if not license_files:
        print_error("Could not find a KTVLICENSE or a 3PPLICENSE file")
        sys.exit(1)

    found_errors = False

    for license_file in license_files:
        try:
            parser = LicenseParser(license_file, OpenSourceNoticeConfig())

            license_info = parser.get_license_info()
            license_info.check_completeness()

            file_names = license_info.get_file_names()
            sha1_checksums = license_info.get_sha1_checksums()
            for index, file_name in file_names.items():
                verify_binary_file(file_name, sha1_checksums[index])

            print_progress(print_progress_command, license_file, "OK")
        except ParserError as ex:
            print_progress(print_progress_command, license_file, "failed")
            print_error("%s - see %s" % (ex, USAGE_URL))
            found_errors = True
        except Exception as ex:
            print_progress(print_progress_command, license_file, "failed")
            print_error(ex)
            found_errors = True

    if found_errors:
        sys.exit(1)


main()
