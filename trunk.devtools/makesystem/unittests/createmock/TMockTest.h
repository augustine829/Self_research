// Copyright (c) YEAR ARRIS Enterprises, Inc. All rights reserved.
//
// This program is confidential and proprietary to ARRIS Enterprises, Inc.
// (ARRIS), and may not be copied, reproduced, modified, disclosed to others,
// published or used, in whole or in part, without the express prior written
// permission of ARRIS.
//
// This file was generated by createmock from ITest.h.
//
// DO NOT EDIT, CHANGES WILL BE LOST!

#ifndef MY_LONG_PATH_SUB_MOCKS_TMOCKTEST_H
#define MY_LONG_PATH_SUB_MOCKS_TMOCKTEST_H

#include "ITest.h"
#include <gmock/gmock.h>

namespace Kvast {

namespace Fening {

class TNaggyMockApelsin : public IApelsin
{
public:
  MOCK_METHOD3(Skala, const int* const(int x, const std::vector<std::string>& y, std::string z));
  class TNaggyMockApelsinObserver : public IApelsinObserver
  {
  public:
    MOCK_CONST_THROW_METHOD1(OnClimb, unsigned int(int x), throw(TApa));

    // IBar
    MOCK_METHOD1(Barson, unsigned long(const std::string& x));

    // Die() is called by the destructor.
    MOCK_METHOD0(Die, void());

    // Separately compiled constructor and destructor
    TNaggyMockApelsinObserver();
    virtual ~TNaggyMockApelsinObserver() throw (TCitrus);

    bool EnableDestructorMocking; // Set to true to make destructor call Die().
  };

  typedef testing::NiceMock<TNaggyMockApelsinObserver> TNiceMockApelsinObserver;
  typedef testing::StrictMock<TNaggyMockApelsinObserver> TStrictMockApelsinObserver;
  typedef TNiceMockApelsinObserver TMockApelsinObserver;

  MOCK_CONST_METHOD1(Eat, void(std::string foo));
  MOCK_CONST_THROW_METHOD1(Eater, TApa&(std::string foo), throw(TApa&));
  MOCK_THROW_METHOD1(EatFunc1, void(const std::function<void ()> &food), throw ());
  MOCK_METHOD1(EatFunc2, void(const std::function<bool (const IFish*)> &food));

  // IFoo
  MOCK_METHOD0(Fooson, int());

  // IBar
  MOCK_METHOD1(Barson, unsigned long(const std::string& x));

  // IFie
  MOCK_METHOD0(Fieson, void());

  // Die() is called by the destructor.
  MOCK_METHOD0(Die, void());

  // Separately compiled constructor and destructor
  TNaggyMockApelsin();
  virtual ~TNaggyMockApelsin() throw();

  bool EnableDestructorMocking; // Set to true to make destructor call Die().
};

typedef testing::NiceMock<TNaggyMockApelsin> TNiceMockApelsin;
typedef testing::StrictMock<TNaggyMockApelsin> TStrictMockApelsin;
typedef TNiceMockApelsin TMockApelsin;

class TNaggyMockBanan : public IBanan
{
public:
  MOCK_METHOD2(Skala, unsigned long long(unsigned long long x, TBeaver<int> zzz));

  // Die() is called by the destructor.
  MOCK_METHOD0(Die, void());

  // Separately compiled constructor and destructor
  TNaggyMockBanan();
  virtual ~TNaggyMockBanan();

  bool EnableDestructorMocking; // Set to true to make destructor call Die().
};

typedef testing::NiceMock<TNaggyMockBanan> TNiceMockBanan;
typedef testing::StrictMock<TNaggyMockBanan> TStrictMockBanan;
typedef TNiceMockBanan TMockBanan;

} // namespace Fening

} // namespace Kvast

#endif
