#!/usr/bin/env python2
# -*-python-*-

import os
import re
from subprocess import check_call, check_output, STDOUT
from pyutil.count_effective_line import count_effective_line

print_progress_command = os.environ["MAKESYSTEM"] + "/print_progress"
component = os.environ["COMPONENT"]

coverage_re = r"File '([^']+)'\nLines executed:([\d.]+)% of (\d+)"
coverage_data = {}  # {filename: (tested_lines, lines)
excluded_src_re = r"(\S*(test|mock)\S*)|main\.cpp|\S*\.(idl|h)$"

all_src_files = set()
for filename in open(".sources").read().split():
    if os.path.exists(filename):
        all_src_files.add(filename)

if os.path.exists(".gcov_runs"):
    for command in open(".gcov_runs"):
        output = check_output(command, stderr=STDOUT, shell=True)
        for (filename, percentage, lines) in re.findall(coverage_re, output):
            if filename in all_src_files \
                    and not re.match(excluded_src_re, filename):
                lines = int(lines)
                tested_lines = int(lines * float(percentage) / 100 + 0.5)
                coverage_data[filename] = (tested_lines, lines)

# Add zero result for testable files for which no code was executed:
for filename in all_src_files:
    if filename not in coverage_data \
            and not re.match(excluded_src_re, filename):
        coverage_data[filename] = (0, count_effective_line(filename))

total_lines = sum(x[1] for x in coverage_data.values())
if total_lines == 0:
    text = "{0} N/A".format(component)
    check_call([print_progress_command, "COVERAGE", text])
else:
    total_tested_lines = sum(x[0] for x in coverage_data.values())
    total_percentage = 100 * float(total_tested_lines) / total_lines
    text = "{0} {1} of {2} lines ({3:.2f}%)".format(
        component, total_tested_lines, total_lines, total_percentage)
    check_call([print_progress_command, "COVERAGE", text])
    coverage_items = coverage_data.items()
    coverage_items.sort()
    coverage_items.append(("Total", (total_tested_lines, total_lines)))
    longest_filename = max(len(x[0]) for x in coverage_items)
    print "{0:{1}}  Test coverage".format("Filename", longest_filename)
    print "-" * (31 + longest_filename)
    for (filename, (tested_lines, lines)) in coverage_items:
        if lines == 0:
            percentage = 100
        else:
            percentage = 100 * float(tested_lines) / lines
        print "{0:{1}}  {2:5} of {3:5} lines ({4:6.2f}%)".format(
            filename, longest_filename, tested_lines, lines, percentage)
